cmake_minimum_required(VERSION 2.6)

project (CLUSTERCONTROL)

message(STATUS ${CMAKE_BINARY_DIR})
message(STATUS ${CMAKE_SOURCE_DIR})
message(STATUS "Install prefix: ${CMAKE_INSTALL_PREFIX}")

if (NOT DEFINED BUILDNUM)
    set (BUILDNUM 1)
endif ()

# Version - read from 'version' file.
file(STRINGS ${CLUSTERCONTROL_SOURCE_DIR}/version _version)
string(REGEX MATCH "[0-9]+.[0-9]+.[0-99]+" VERSION "${_version}")
if (_version)
    string(REGEX MATCHALL "[0-9]+" VERSION_LIST "${VERSION}")
    list(GET VERSION_LIST 0 MAJOR_VERSION)
    list(GET VERSION_LIST 1 MINOR_VERSION)
    list(GET VERSION_LIST 2 PATCH_VERSION)

    message (STATUS "Version string ${_version}")
    message (STATUS "Major version ${MAJOR_VERSION}")
    message (STATUS "Minor version ${MINOR_VERSION}")
    message (STATUS "Patch version ${PATCH_VERSION}")
    message (STATUS "Build number ${BUILDNUM}")
endif (_version)

#
# install
#

# install (DIRECTORY
#     DESTINATION .
#     USE_SOURCE_PERMISSIONS
#     PATTERN ".gitignore" EXCLUDE
#     PATTERN "*.go" EXCLUDE
#     PATTERN "*.sh" EXCLUDE
#     PATTERN "*.md" EXCLUDE
#     PATTERN "*.txt" EXCLUDE
#     PATTERN "version" EXCLUDE
#     PATTERN "*.py" EXCLUDE
#     PATTERN "compiler" EXCLUDE
#     PATTERN "*-dc.default" EXCLUDE
#     PATTERN "Test" EXCLUDE
#     PATTERN "TestSuite" EXCLUDE
#     PATTERN "*.old" EXCLUDE
#     PATTERN "*.scss" EXCLUDE
#     PATTERN "Gruntfile.js" EXCLUDE
#     PATTERN "package.json" EXCLUDE
#     PATTERN "npm-debug.log" EXCLUDE
# )

# Binary
install (FILES
    ${CLUSTERCONTROL_SOURCE_DIR}/clustercontrol
    DESTINATION /usr/sbin
    PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
    GROUP_EXECUTE GROUP_READ WORLD_READ WORLD_EXECUTE
)

# Public files
install (DIRECTORY
    ${CLUSTERCONTROL_SOURCE_DIR}/dist
    DESTINATION /usr/share/clustercontrol
)

# Upstart files
install (FILES
    ${CMAKE_SOURCE_DIR}/etc/init.d/clustercontrol
    DESTINATION /etc/init.d
    PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ
    GROUP_EXECUTE GROUP_READ WORLD_READ WORLD_EXECUTE
)

# System service files
install (FILES
    ${CMAKE_SOURCE_DIR}/etc/systemd/clustercontrol.service
    DESTINATION /etc/systemd/system
    PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ
)

# Crontab files
# install (FILES
#     ${CMAKE_SOURCE_DIR}/etc/cron.d/cmon-ssh
#     DESTINATION /etc/cron.d
#     PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ
# )

set (CPACK_PACKAGE_NAME "clustercontrol")
set (CPACK_PACKAGE_VENDOR "Severalnines AB")
set (CPACK_PACKAGE_CONTACT "support@severalnines.com")
set (CPACK_PACKAGE_DESCRIPTION "Severalnines ClusterControl")
set (CPACK_PACKAGE_DESCRIPTION_SUMMARY "Severalnines ClusterControl")
set (CPACK_PACKAGE_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}")
set (CPACK_PACKAGE_VERSION_MAJOR "${MAJOR_VERSION}")
set (CPACK_PACKAGE_VERSION_MINOR "${MINOR_VERSION}")
set (CPACK_PACKAGE_VERSION_PATCH "${PATCH_VERSION}")

set (CPACK_PACKAGE_RELEASE "${BUILDNUM}")
set (CPACK_RPM_PACKAGE_RELEASE ${CPACK_PACKAGE_RELEASE})
set (CPACK_DEBIAN_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION}-${CPACK_PACKAGE_RELEASE}")

set (CPACK_PACKAGE_INSTALL_DIRECTORY "${CMAKE_INSTALL_PREFIX}")
set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}-${CPACK_PACKAGE_RELEASE}-${CMAKE_SYSTEM_PROCESSOR}")
if (${CPACK_GENERATOR} STREQUAL "TGZ")
    set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")
elseif (${CPACK_GENERATOR} STREQUAL "DEB")
    set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}_${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}-${CPACK_PACKAGE_RELEASE}_${CMAKE_SYSTEM_PROCESSOR}")
elseif (${CPACK_GENERATOR} STREQUAL "RPM")
    set (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${MAJOR_VERSION}.${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}-${CPACK_PACKAGE_RELEASE}-${CMAKE_SYSTEM_PROCESSOR}")
endif()

set (CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}_${MAJOR_VERSION}_${MINOR_VERSION}.${CPACK_PACKAGE_VERSION_PATCH}")

set (CPACK_CMAKE_GENERATOR "Unix Makefiles")
if (APPLE)
    set (CPACK_GENERATOR TGZ)
else (APPLE)
    set (CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
# RPM
    set (CPACK_RPM_PACKAGE_LICENSE "GPLv2+")
    set (CPACK_RPM_PACKAGE_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
    set (CPACK_RPM_SPEC_MORE_DEFINE
        "%define ignore \#\n")
    set (CPACK_RPM_USER_FILELIST
        "%ignore /etc"
        "%ignore /etc/"
        "%ignore /etc/init.d"
        "%ignore /usr/sbin")
    set (CPACK_RPM_POST_UNINSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/CMake/redhat/postrm")
    set (CPACK_RPM_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/CMake/redhat/preinst")
    set (CPACK_RPM_POST_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/CMake/redhat/postinst")
    set (CPACK_RPM_COMPONENT_INSTALL OFF)
# DEB
    set (CPACK_DEBIAN_PACKAGE_MAINTAINER ${CPACK_PACKAGE_CONTACT})
    set (CPACK_DEBIAN_PACKAGE_SECTION "database")
    set (CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/CMake/debian/preinst;${CMAKE_SOURCE_DIR}/CMake/debian/postinst;${CMAKE_SOURCE_DIR}/CMake/debian/postrm")
    set (CPACK_DEBIAN_ARCHITECTURE ${CMAKE_SYSTEM_PROCESSOR})
endif (APPLE)

include (CPack)